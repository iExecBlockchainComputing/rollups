const FACTORY = require('../deployment/factory.json')

const { expect } = require('chai');

async function deploy(name, ...params) {
  const Contract = await ethers.getContractFactory(name);
  return await Contract.deploy(...params).then(f => f.deployed());
}

describe('EVM/OVM features', () => {
	before(async () => {
		this.wallets = await ethers.getSigners();
	})

	beforeEach(async () => {})

	describe('EIP-155', async () => {
		it ('factory deployment', async () => {
			// ovm version of the factory
			if (process.env.MODE === 'OVM') {
				FACTORY.tx = "0xf9090c8080830f42408080b908be608060405234801561001057600080fd5b5061089e806100206000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c80631dcce26514610051578063482f20241461019c5780638563a8f614610241578063bbdd8aeb146102e6575b600080fd5b6101806004803603606081101561006757600080fd5b810190602081018135600160201b81111561008157600080fd5b82018360208201111561009357600080fd5b803590602001918460018302840111600160201b831117156100b457600080fd5b91908080601f016020809104026020016040519081016040528181529291906020840183838082843760009201919091525092958435959094909350604081019250602001359050600160201b81111561010d57600080fd5b82018360208201111561011f57600080fd5b803590602001918460018302840111600160201b8311171561014057600080fd5b91908080601f0160208091040260200160405190810160405281815292919060208401838380828437600092019190915250929550610415945050505050565b6040516001600160a01b03909116815260200160405180910390f35b610180600480360360408110156101b257600080fd5b810190602081018135600160201b8111156101cc57600080fd5b8201836020820111156101de57600080fd5b803590602001918460018302840111600160201b831117156101ff57600080fd5b91908080601f0160208091040260200160405190810160405281815292919060208401838380828437600092019190915250929550509135925061049d915050565b6101806004803603604081101561025757600080fd5b810190602081018135600160201b81111561027157600080fd5b82018360208201111561028357600080fd5b803590602001918460018302840111600160201b831117156102a457600080fd5b91908080601f016020809104026020016040519081016040528181529291906020840183838082843760009201919091525092955050913592506104be915050565b610180600480360360608110156102fc57600080fd5b810190602081018135600160201b81111561031657600080fd5b82018360208201111561032857600080fd5b803590602001918460018302840111600160201b8311171561034957600080fd5b91908080601f016020809104026020016040519081016040528181529291906020840183838082843760009201919091525092958435959094909350604081019250602001359050600160201b8111156103a257600080fd5b8201836020820111156103b457600080fd5b803590602001918460018302840111600160201b831117156103d557600080fd5b91908080601f01602080910402602001604051908101604052818152929190602084018383808284376000920191909152509295506104d4945050505050565b60006104958484846040516020018083815260200182805190602001908083835b602083106104555780518252601f199092019160209182019101610436565b6001836020036101000a038019825116818451161790925250505091909101935060409250505051602081830303815290604052805190602001206106e4565b949350505050565b60006104b783836040516020810160405260008152610415565b9392505050565b60006104b7838360405160208101604052600081525b6000806105558585856040516020018083815260200182805190602001908083835b602083106105155780518252601f1990920191602091820191016104f6565b6001836020036101000a03801982511681845116179092525050509190910193506040925050505160208183030381529060405280519060200120610789565b9050806001600160a01b03167f387ea218537e939551af33bbc2dd6c53b1fee55d377a0dce288258f972cb3a9c60405160405180910390a26000835111156104955760006060826001600160a01b0316856040518082805190602001908083835b602083106105d55780518252601f1990920191602091820191016105b6565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865a61060f6107bf565b5050505050509150503d8060008114610644576040513d603f01601f191681016040523d815291503d6000602084013e610649565b606091505b50915091508181906106d95760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561069e578082015183820152602001610686565b50505050905090810190601f1680156106cb5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050949350505050565b600060606001600160f81b03195a63996d79a5598160e01b8152602081600483336000905af18061071b576040513d6000823e3d81fd5b815193505050508486805190602001206040516001600160f81b031994909416602085015260609290921b6bffffffffffffffffffffffff191660218401526035830152605582015260750160405160208183030381529060405280519060200120901b60601c9392505050565b600082828281835160208501600061079f610814565b5050509050806107ad610866565b6107b657600080fd5b95945050505050565b634c6d7c84598160e01b815284600482015260005b888110156107ef5780880151828201602401526020016107d4565b5089898960240183336000905af18061080e576040513d6000823e3d81fd5b99505050565b63d8178e3d598160e01b815286600482015260005b86811015610844578086015182820160240152602001610829565b506020818760240183336000905af18061085d57600080fd5b81519750505050565b63c3382d0f598160e01b8152836004820152602081602483336000905af180610895576040513d6000823e3d81fd5b81519450505050561ba06dd21ebbc7c9f1c0e2b5b6281301fdb23db6003136e73f598fd5877ff83347fda07d3003d41a5cb9d93dddc835ed30e508c369d8936d81c6501f4de10e7a003b4a";
			}

			// don't fill the deploying wallet for OVM
			if (process.env.MODE !== 'OVM') {
				await this.wallets[0].sendTransaction({ to: FACTORY.deployer, value: FACTORY.cost })
			}

			// Deploy factory
			await ethers.provider.send('eth_sendRawTransaction', [ FACTORY.tx ])

			// checks
			expect(ethers.utils.keccak256(await ethers.provider.send('eth_getCode', [ FACTORY.address ])))
			.to.equal(process.env.MODE === 'OVM' ? '0x0aa01de5bb73ce529858cb533eb2d356f4a00686ecf31efdcc65fb3f8a7e60d7' : '0xa8ca8e2cb0b841a4239cea8886b1c912ac194ebb0e953e5ac2710dc8d0b083c7')
		})

		it ('factory usage', async () => {
			const Testing  = await ethers.getContractFactory('Testing')
			const factory  = new ethers.Contract(FACTORY.address, FACTORY.abi, this.wallets[0])
			const salt     = ethers.utils.randomBytes(32)
			const expected = await factory.predictAddress(Testing.bytecode, salt)

			await expect(factory.createContract(Testing.bytecode, salt)).to.emit(factory, 'NewContract').withArgs(expected)

			this.instance = new ethers.Contract(expected, Testing.interface, this.wallets[0])
		})
	})

	describe('precompiles', async () => {
		it('recover', async () => {
			const signer    = new ethers.Wallet.createRandom();
			const hash      = ethers.utils.randomBytes(32)
			const signature = await signer.signMessage(ethers.utils.arrayify(hash))
			expect(await this.instance.recover(hash, signature)).to.equal(signer.address)
		})
	})
});
